{

mario:
{
    index: 1,
    name: 'Happy Mario Moneyland',
    pic: '/images/mario_pic.jpg',
    brief: '''
Собирай монетки, получай конфетки! Помогите MARIVO собрать больше монеток на уровне.
           ''',
    text: '''
Игровое поле представляет собой квадрат 25х25 клеток. По углам стоят "трубы", из которых раз в несколько ходов вылезают Марио. Играют 2 бота, ходят по очереди. За ход можно передвинуть всех ваших Марио на 1 соседнюю клетку. На поле разбросаны монетки. Если Марио передвигается на клетку с монеткой, он ее собирает. Когда Марио приходит обратно в клетку с "трубой", он отдает все собранные им монетки и они добавляются к итоговым очкам. Если Марио двигается на клетку, где стоит Марио из другой команды, они бьют друг друга и исчезают с игрового поля.

Побеждает в итоге бот, набравший больше очков.

Нужно написать функцию на языке Javascript, в которую передаются координаты текущего юнита и состояние игрового поля, и которая возвращает направление движения для этого юнита.

Ограничение матча по времени: 500 ходов. Ходом считается ход одной стороны, т.е. в ход 1 ходит 1й бот, ход 2 - 2й бот, и т.д.

Новые Марио появляются каждые 20 ходов. Если в клетке с "трубой" уже стоит юнит, то новый Марио появляется в одной из соседних клеток. Если все соседние клетки заняты, то ничего не происходит. Если на "трубе" в момент появления нового юнита стоит Марио из другой команды, он пропадает с поля.

Подсчет очков за матчи производится следующим образом. Боты играют "каждый с каждым", за победу дается 2 очка, за ничью - 1. Программы, работающие слишком долго или использующие вызовы системных функций будут дисквалифицированы.

Удачи!
''',
    code: [
        ['Template', 
'''// Функция move должна вернуть направление хода для Марио, который ходит сейчас.
// Например, если функция вернула [1, 0] - то юнит сходит на 1 клетку по координате x и на 0 по координате y (т.е. вправо).
// Параметры:
//   x, y - координаты юнита.
//   view - функция для получения данных о игровом поле.
//     view(15, 10) вернет данные о клетке с координатами x = 15, y = 10.
//     view.mx вернет ширину поля.
//     view.my вернет высоту поля.
//     Данные о клетке: массив из 2х элементов - [id, money]
//       id: что находится в клетке. '.' - пусто, '$' - монетка, '1','2' - юниты, 'X' - клетка за границами поля
//       money: кол-во денег у юнита, если в клетке юнит
//   turn - количество прошедших ходов с начала игры.
function move(x, y, view, turn) {
	// TODO: напишите здесь свой алгоритм!
	return [0, 0];
}
'''],

        ['RandomBot', 
'''function move(x, y, view, turn) {
    return [utils.random(3) - 1, utils.random(3) - 1];
}
'''],

['GreedyBot',
'''var initialized = false;
var homeX, homeY, id, mx, my;

function init(x, y, view) {
    homeX = x;
    homeY = y;
    id = view(x, y)[0];
    mx = view.mx;
    my = view.my;
}

function coords(x, y) {
    return x + y * mx;
}

function bfs(x, y, view) {
    var queue = [[x, y]];
    var b = {};
    b[coords(x, y)] = true;
    while (queue.length) {
        var cur = queue.shift();
        for (var i = cur[0] - 1; i <= cur[0] + 1; ++i)
            for (var j = cur[1] - 1; j <= cur[1] + 1; ++j) {
                var c = coords(i, j);
                if (!b[c]) {
                    b[c] = true;
                    var cell = view(i, j);
                    if (cell[0] == '$') {
                        return { x: i, y: j };
                    } else if (cell[0] == 'X' || cell[0] == id) {
                        continue;
                    } else {
                        queue.push([i, j]);
                    }
                }
            }
    }
    return { x: x, y: y };
}

function move(x, y, view, turn) {
    if (!initialized) {
        initialized = true;
        init(x, y, view);
    }
    var cur = view(x, y);
    if (cur[1] > 0) {
        return [homeX - x, homeY - y];
    } else {
        var nearestGold = bfs(x, y, view);
        return [nearestGold.x - x, nearestGold.y - y];
    }
}
''']],
    sampleCodeId: 0,
    sampleBotCodeId: 1
}

}